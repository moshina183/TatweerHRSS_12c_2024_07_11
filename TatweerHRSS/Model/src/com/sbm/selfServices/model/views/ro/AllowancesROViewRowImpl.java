package com.sbm.selfServices.model.views.ro;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Mar 03 15:15:11 EET 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AllowancesROViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TripType {
            public Object get(AllowancesROViewRowImpl obj) {
                return obj.getTripType();
            }

            public void put(AllowancesROViewRowImpl obj, Object value) {
                obj.setTripType((String)value);
            }
        }
        ,
        ClassType {
            public Object get(AllowancesROViewRowImpl obj) {
                return obj.getClassType();
            }

            public void put(AllowancesROViewRowImpl obj, Object value) {
                obj.setClassType((String)value);
            }
        }
        ,
        AllowanceType {
            public Object get(AllowancesROViewRowImpl obj) {
                return obj.getAllowanceType();
            }

            public void put(AllowancesROViewRowImpl obj, Object value) {
                obj.setAllowanceType((String)value);
            }
        }
        ,
        AllowanceAmount {
            public Object get(AllowancesROViewRowImpl obj) {
                return obj.getAllowanceAmount();
            }

            public void put(AllowancesROViewRowImpl obj, Object value) {
                obj.setAllowanceAmount((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(AllowancesROViewRowImpl object);

        public abstract void put(AllowancesROViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int TRIPTYPE = AttributesEnum.TripType.index();
    public static final int CLASSTYPE = AttributesEnum.ClassType.index();
    public static final int ALLOWANCETYPE = AttributesEnum.AllowanceType.index();
    public static final int ALLOWANCEAMOUNT = AttributesEnum.AllowanceAmount.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AllowancesROViewRowImpl() {
    }


    /**
     * Gets the attribute value for the calculated attribute TripType.
     * @return the TripType
     */
    public String getTripType() {
        return (String) getAttributeInternal(TRIPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TripType.
     * @param value value to set the  TripType
     */
    public void setTripType(String value) {
        setAttributeInternal(TRIPTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ClassType.
     * @return the ClassType
     */
    public String getClassType() {
        return (String) getAttributeInternal(CLASSTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ClassType.
     * @param value value to set the  ClassType
     */
    public void setClassType(String value) {
        setAttributeInternal(CLASSTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AllowanceType.
     * @return the AllowanceType
     */
    public String getAllowanceType() {
        return (String) getAttributeInternal(ALLOWANCETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AllowanceType.
     * @param value value to set the  AllowanceType
     */
    public void setAllowanceType(String value) {
        setAttributeInternal(ALLOWANCETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AllowanceAmount.
     * @return the AllowanceAmount
     */
    public Number getAllowanceAmount() {
        return (Number) getAttributeInternal(ALLOWANCEAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AllowanceAmount.
     * @param value value to set the  AllowanceAmount
     */
    public void setAllowanceAmount(Number value) {
        setAttributeInternal(ALLOWANCEAMOUNT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
