package com.sbm.selfServices.model.views.up;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 12 14:58:50 AST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ManagerEmployeesVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        EmployeeNumber {
            public Object get(ManagerEmployeesVORowImpl obj) {
                return obj.getEmployeeNumber();
            }

            public void put(ManagerEmployeesVORowImpl obj, Object value) {
                obj.setEmployeeNumber((String)value);
            }
        }
        ,
        EmployeeName {
            public Object get(ManagerEmployeesVORowImpl obj) {
                return obj.getEmployeeName();
            }

            public void put(ManagerEmployeesVORowImpl obj, Object value) {
                obj.setEmployeeName((String)value);
            }
        }
        ,
        SalaryAmount {
            public Object get(ManagerEmployeesVORowImpl obj) {
                return obj.getSalaryAmount();
            }

            public void put(ManagerEmployeesVORowImpl obj, Object value) {
                obj.setSalaryAmount((String)value);
            }
        }
        ,
        ManagerNumber {
            public Object get(ManagerEmployeesVORowImpl obj) {
                return obj.getManagerNumber();
            }

            public void put(ManagerEmployeesVORowImpl obj, Object value) {
                obj.setManagerNumber((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ManagerEmployeesVORowImpl object);

        public abstract void put(ManagerEmployeesVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int EMPLOYEENUMBER = AttributesEnum.EmployeeNumber.index();
    public static final int EMPLOYEENAME = AttributesEnum.EmployeeName.index();
    public static final int SALARYAMOUNT = AttributesEnum.SalaryAmount.index();
    public static final int MANAGERNUMBER = AttributesEnum.ManagerNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ManagerEmployeesVORowImpl() {
    }

    /**
     * Gets ManagerEmployeesEO entity object.
     * @return the ManagerEmployeesEO
     */
    public EntityImpl getManagerEmployeesEO() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for EMPLOYEE_NUMBER using the alias name EmployeeNumber.
     * @return the EMPLOYEE_NUMBER
     */
    public String getEmployeeNumber() {
        return (String) getAttributeInternal(EMPLOYEENUMBER);
    }

    /**
     * Sets <code>value</code> as attribute value for EMPLOYEE_NUMBER using the alias name EmployeeNumber.
     * @param value value to set the EMPLOYEE_NUMBER
     */
    public void setEmployeeNumber(String value) {
        setAttributeInternal(EMPLOYEENUMBER, value);
    }

    /**
     * Gets the attribute value for EMPLOYEE_NAME using the alias name EmployeeName.
     * @return the EMPLOYEE_NAME
     */
    public String getEmployeeName() {
        return (String) getAttributeInternal(EMPLOYEENAME);
    }

    /**
     * Sets <code>value</code> as attribute value for EMPLOYEE_NAME using the alias name EmployeeName.
     * @param value value to set the EMPLOYEE_NAME
     */
    public void setEmployeeName(String value) {
        setAttributeInternal(EMPLOYEENAME, value);
    }

    /**
     * Gets the attribute value for SALARY_AMOUNT using the alias name SalaryAmount.
     * @return the SALARY_AMOUNT
     */
    public String getSalaryAmount() {
        return (String) getAttributeInternal(SALARYAMOUNT);
    }

    /**
     * Sets <code>value</code> as attribute value for SALARY_AMOUNT using the alias name SalaryAmount.
     * @param value value to set the SALARY_AMOUNT
     */
    public void setSalaryAmount(String value) {
        setAttributeInternal(SALARYAMOUNT, value);
    }

    /**
     * Gets the attribute value for MANAGER_NUMBER using the alias name ManagerNumber.
     * @return the MANAGER_NUMBER
     */
    public String getManagerNumber() {
        return (String) getAttributeInternal(MANAGERNUMBER);
    }

    /**
     * Sets <code>value</code> as attribute value for MANAGER_NUMBER using the alias name ManagerNumber.
     * @param value value to set the MANAGER_NUMBER
     */
    public void setManagerNumber(String value) {
        setAttributeInternal(MANAGERNUMBER, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
