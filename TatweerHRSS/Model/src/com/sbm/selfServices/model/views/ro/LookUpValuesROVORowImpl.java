package com.sbm.selfServices.model.views.ro;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed May 24 05:47:46 AST 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LookUpValuesROVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        LookupValueNameDisp {
            public Object get(LookUpValuesROVORowImpl obj) {
                return obj.getLookupValueNameDisp();
            }

            public void put(LookUpValuesROVORowImpl obj, Object value) {
                obj.setLookupValueNameDisp((String)value);
            }
        }
        ,
        LookupValueId {
            public Object get(LookUpValuesROVORowImpl obj) {
                return obj.getLookupValueId();
            }

            public void put(LookUpValuesROVORowImpl obj, Object value) {
                obj.setLookupValueId((Number)value);
            }
        }
        ,
        LookupTypeId {
            public Object get(LookUpValuesROVORowImpl obj) {
                return obj.getLookupTypeId();
            }

            public void put(LookUpValuesROVORowImpl obj, Object value) {
                obj.setLookupTypeId((Number)value);
            }
        }
        ,
        LookupValueNameDispTl {
            public Object get(LookUpValuesROVORowImpl obj) {
                return obj.getLookupValueNameDispTl();
            }

            public void put(LookUpValuesROVORowImpl obj, Object value) {
                obj.setLookupValueNameDispTl((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(LookUpValuesROVORowImpl object);

        public abstract void put(LookUpValuesROVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int LOOKUPVALUENAMEDISP = AttributesEnum.LookupValueNameDisp.index();
    public static final int LOOKUPVALUEID = AttributesEnum.LookupValueId.index();
    public static final int LOOKUPTYPEID = AttributesEnum.LookupTypeId.index();
    public static final int LOOKUPVALUENAMEDISPTL = AttributesEnum.LookupValueNameDispTl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LookUpValuesROVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute LookupValueNameDisp.
     * @return the LookupValueNameDisp
     */
    public String getLookupValueNameDisp() {
        return (String) getAttributeInternal(LOOKUPVALUENAMEDISP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LookupValueNameDisp.
     * @param value value to set the  LookupValueNameDisp
     */
    public void setLookupValueNameDisp(String value) {
        setAttributeInternal(LOOKUPVALUENAMEDISP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LookupValueId.
     * @return the LookupValueId
     */
    public Number getLookupValueId() {
        return (Number) getAttributeInternal(LOOKUPVALUEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LookupValueId.
     * @param value value to set the  LookupValueId
     */
    public void setLookupValueId(Number value) {
        setAttributeInternal(LOOKUPVALUEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LookupTypeId.
     * @return the LookupTypeId
     */
    public Number getLookupTypeId() {
        return (Number) getAttributeInternal(LOOKUPTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LookupTypeId.
     * @param value value to set the  LookupTypeId
     */
    public void setLookupTypeId(Number value) {
        setAttributeInternal(LOOKUPTYPEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LookupValueNameDispTl.
     * @return the LookupValueNameDispTl
     */
    public Number getLookupValueNameDispTl() {
        return (Number) getAttributeInternal(LOOKUPVALUENAMEDISPTL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LookupValueNameDispTl.
     * @param value value to set the  LookupValueNameDispTl
     */
    public void setLookupValueNameDispTl(Number value) {
        setAttributeInternal(LOOKUPVALUENAMEDISPTL, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
