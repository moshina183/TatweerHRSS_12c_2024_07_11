package com.sbm.selfServices.model.views.up;

import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 23 14:53:48 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LocationsVORowImpl extends ViewRowImpl {

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CreationDate {
            public Object get(LocationsVORowImpl obj) {
                return obj.getCreationDate();
            }

            public void put(LocationsVORowImpl obj, Object value) {
                obj.setCreationDate((Timestamp)value);
            }
        }
        ,
        LocationsId {
            public Object get(LocationsVORowImpl obj) {
                return obj.getLocationsId();
            }

            public void put(LocationsVORowImpl obj, Object value) {
                obj.setLocationsId((Number)value);
            }
        }
        ,
        LocationsName {
            public Object get(LocationsVORowImpl obj) {
                return obj.getLocationsName();
            }

            public void put(LocationsVORowImpl obj, Object value) {
                obj.setLocationsName((String)value);
            }
        }
        ,
        RowID {
            public Object get(LocationsVORowImpl obj) {
                return obj.getRowID();
            }

            public void put(LocationsVORowImpl obj, Object value) {
                obj.setRowID((RowID)value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(LocationsVORowImpl object);

        public abstract void put(LocationsVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LOCATIONSID = AttributesEnum.LocationsId.index();
    public static final int LOCATIONSNAME = AttributesEnum.LocationsName.index();
    public static final int ROWID = AttributesEnum.RowID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LocationsVORowImpl() {
    }

    /**
     * Gets LocationsEO entity object.
     * @return the LocationsEO
     */
    public EntityImpl getLocationsEO() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for CREATION_DATE using the alias name CreationDate.
     * @return the CREATION_DATE
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATION_DATE using the alias name CreationDate.
     * @param value value to set the CREATION_DATE
     */
    public void setCreationDate(Timestamp value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for LOCATIONS_ID using the alias name LocationsId.
     * @return the LOCATIONS_ID
     */
    public Number getLocationsId() {
        return (Number) getAttributeInternal(LOCATIONSID);
    }

    /**
     * Sets <code>value</code> as attribute value for LOCATIONS_ID using the alias name LocationsId.
     * @param value value to set the LOCATIONS_ID
     */
    public void setLocationsId(Number value) {
        setAttributeInternal(LOCATIONSID, value);
    }

    /**
     * Gets the attribute value for LOCATIONS_NAME using the alias name LocationsName.
     * @return the LOCATIONS_NAME
     */
    public String getLocationsName() {
        return (String) getAttributeInternal(LOCATIONSNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for LOCATIONS_NAME using the alias name LocationsName.
     * @param value value to set the LOCATIONS_NAME
     */
    public void setLocationsName(String value) {
        setAttributeInternal(LOCATIONSNAME, value);
    }

    /**
     * Gets the attribute value for ROWID using the alias name RowID.
     * @return the ROWID
     */
    public RowID getRowID() {
        return (RowID) getAttributeInternal(ROWID);
    }

    /**
     * Sets <code>value</code> as attribute value for ROWID using the alias name RowID.
     * @param value value to set the ROWID
     */
    public void setRowID(RowID value) {
        setAttributeInternal(ROWID, value);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


}
