package com.sbm.selfServices.model.views.ro;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 07 23:29:49 AST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TotalMonthsInYearRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PersonId {
            public Object get(TotalMonthsInYearRowImpl obj) {
                return obj.getPersonId();
            }

            public void put(TotalMonthsInYearRowImpl obj, Object value) {
                obj.setPersonId((String)value);
            }
        }
        ,
        TotalMonthsInYear {
            public Object get(TotalMonthsInYearRowImpl obj) {
                return obj.getTotalMonthsInYear();
            }

            public void put(TotalMonthsInYearRowImpl obj, Object value) {
                obj.setTotalMonthsInYear((Number)value);
            }
        }
        ,
        NumberOfRows {
            public Object get(TotalMonthsInYearRowImpl obj) {
                return obj.getNumberOfRows();
            }

            public void put(TotalMonthsInYearRowImpl obj, Object value) {
                obj.setNumberOfRows((Number)value);
            }
        }
        ,
        YearEnd {
            public Object get(TotalMonthsInYearRowImpl obj) {
                return obj.getYearEnd();
            }

            public void put(TotalMonthsInYearRowImpl obj, Object value) {
                obj.setYearEnd((Date)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(TotalMonthsInYearRowImpl object);

        public abstract void put(TotalMonthsInYearRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PERSONID = AttributesEnum.PersonId.index();
    public static final int TOTALMONTHSINYEAR = AttributesEnum.TotalMonthsInYear.index();
    public static final int NUMBEROFROWS = AttributesEnum.NumberOfRows.index();
    public static final int YEAREND = AttributesEnum.YearEnd.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TotalMonthsInYearRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute PersonId.
     * @return the PersonId
     */
    public String getPersonId() {
        return (String) getAttributeInternal(PERSONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PersonId.
     * @param value value to set the  PersonId
     */
    public void setPersonId(String value) {
        setAttributeInternal(PERSONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalMonthsInYear.
     * @return the TotalMonthsInYear
     */
    public Number getTotalMonthsInYear() {
        return (Number) getAttributeInternal(TOTALMONTHSINYEAR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalMonthsInYear.
     * @param value value to set the  TotalMonthsInYear
     */
    public void setTotalMonthsInYear(Number value) {
        setAttributeInternal(TOTALMONTHSINYEAR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NumberOfRows.
     * @return the NumberOfRows
     */
    public Number getNumberOfRows() {
        return (Number) getAttributeInternal(NUMBEROFROWS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NumberOfRows.
     * @param value value to set the  NumberOfRows
     */
    public void setNumberOfRows(Number value) {
        setAttributeInternal(NUMBEROFROWS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute YearEnd.
     * @return the YearEnd
     */
    public Date getYearEnd() {
        return (Date) getAttributeInternal(YEAREND);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute YearEnd.
     * @param value value to set the  YearEnd
     */
    public void setYearEnd(Date value) {
        setAttributeInternal(YEAREND, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
